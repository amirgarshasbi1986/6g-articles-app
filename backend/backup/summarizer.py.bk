import ollama
import json
import logging
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_summary(full_text):
    logger.info(f"Input text length: {len(full_text)} characters")
    client = ollama.Client(host='http://localhost:11434')

    prompt = (
        "You are an expert in summarizing technical articles. Summarize the following 6G article in 2 concise paragraphs (100-150 words total), "
        "focusing on technical insights relevant to 6G technology. If the text is short, provide a brief summary based on available information. "
        "Then list 3-5 key points as a JSON array. Always return valid JSON: {\"summary\": \"text\", \"key_points\": [\"point1\", \"point2\", ...]}. "
        "Example: {\"summary\": \"This article discusses 6G...\", \"key_points\": [\"Point 1\", \"Point 2\"]}. "
        f"\n\nText: {full_text[:1000]}"
    )

    try:
        logger.info(f"Sending prompt (first 100 chars): {prompt[:100]}...")
        response = ollama.chat(
            model='llama3:8b-instruct-q4_0',  # Quantized model for resource efficiency
            messages=[{'role': 'user', 'content': prompt}],
            options={'num_ctx': 4096, 'temperature': 0.5}
        )
        content = response['message']['content']
        logger.info(f"Ollama response: {content[:200]}...")

        try:
            result = json.loads(content)
            return {
                'summary': result.get('summary', ''),
                'key_points': result.get('key_points', [])
            }
        except json.JSONDecodeError:
            logger.error("JSON parse error, using fallback")
            # Fallback extraction
            summary = content
            key_points = re.findall(r'- (.+)', content)
            return {'summary': summary, 'key_points': key_points}
    except Exception as e:
        logger.error(f"Summarization error: {e}")
        return {'summary': '', 'key_points': []}
