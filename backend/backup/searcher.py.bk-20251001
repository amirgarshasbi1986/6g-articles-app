import requests
import feedparser
from scholarly import scholarly
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from datetime import datetime, timedelta
import logging
import time
import urllib.parse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Expanded 6G keywords
G6_KEYWORDS = [
    '6G wireless communication',
    '6G terahertz communication',
    '6G ultra-massive MIMO',
    '6G integrated sensing and communication',
    '6G quantum communication',
    '6G dynamic spectrum sharing',
    '6G AI-native networks',
    '6G holographic connectivity',
    '6G ubiquitous connectivity',
    '6G deep connectivity',
    '6G intelligent connectivity',
    '6G THz bands',
    '6G in-band full-duplex',
    '6G visible light communication',
    '6G orbital angular momentum',
    '6G energy efficiency',
    '6G ultra-reliable low latency',
    '6G ultra-high reliability',
    '6G spectral efficiency',
    '6G machine learning',
    '6G edge computing',
    '6G quantum key distribution',
    '6G backscatter communications',
    '6G multiuser MIMO',
    '6G post-quantum security'
]

headers = {
    'User-Agent': '6G-Articles-App/1.0 (mailto:your-email@example.com)',  # Updated user-agent
    'Accept': 'application/json'
}

def arxiv_search(query='6G', max_results=5):
    base = 'http://export.arxiv.org/api/query?'
    params = f'search_query=all:{urllib.parse.quote(query)}&start=0&max_results={max_results}&sortBy=submittedDate&sortOrder=descending'
    try:
        response = requests.get(base + params, timeout=10, headers=headers)
        response.raise_for_status()
        feed = feedparser.parse(response.text)
        articles = []
        for entry in feed.entries:
            authors = ', '.join(author.name for author in entry.authors)
            if len(authors) > 1000:
                authors = authors[:950] + ' ... et al.'
            articles.append({
                'title': entry.title,
                'authors': authors,
                'publish_date': datetime.strptime(entry.published[:10], '%Y-%m-%d').date(),
                'link': entry.link,
                'full_text': entry.summary
            })
        logger.info(f"arXiv fetched {len(articles)} articles for query '{query}'")
        return articles
    except Exception as e:
        logger.error(f"arXiv error for query '{query}': {e}")
        return []

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10), retry=retry_if_exception_type(requests.exceptions.HTTPError))
def semantic_search(query='6G wireless communication', max_results=5):
    url = 'https://api.semanticscholar.org/graph/v1/paper/search'
    params = {'query': urllib.parse.quote(query), 'limit': max_results, 'fields': 'title,authors,publicationDate,url,abstract'}
    try:
        response = requests.get(url, params=params, timeout=10, headers=headers)
        response.raise_for_status()
        data = response.json()
        articles = []
        for p in data.get('data', []):
            if p.get('abstract') and len(p['abstract']) > 50:
                authors = ', '.join(a['name'] for a in p.get('authors', []))
                if len(authors) > 1000:
                    authors = authors[:950] + ' ... et al.'
                articles.append({
                    'title': p['title'],
                    'authors': authors,
                    'publish_date': datetime.strptime(p['publicationDate'], '%Y-%m-%d').date() if p.get('publicationDate') else None,
                    'link': p['url'],
                    'full_text': p['abstract']
                })
        logger.info(f"Semantic Scholar fetched {len(articles)} articles for query '{query}'")
        return articles
    except requests.exceptions.HTTPError as e:
        logger.error(f"Semantic Scholar error for query '{query}': {e}, Response: {e.response.text if e.response else 'No response'}")
        raise
    except Exception as e:
        logger.error(f"Semantic Scholar error for query '{query}': {e}")
        return []

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10), retry=retry_if_exception_type(requests.exceptions.HTTPError))
def openalex_search(query='6G wireless communication', max_results=5):
    url = 'https://api.openalex.org/works'
    params = {
        'filter': f'title.search:{urllib.parse.quote(query)}',
        'sort': 'publication_date:desc',
        'per_page': max_results,
        'select': 'title,authorships,publication_date,primary_location,doi,abstract_inverted_index'
    }
    try:
        response = requests.get(url, params=params, timeout=10, headers=headers)
        response.raise_for_status()
        data = response.json()
        articles = []
        for work in data.get('results', []):
            abstract = work.get('abstract_inverted_index')
            if abstract:
                abstract_text = ' '.join(word for word, _ in sorted([(w, pos) for w, positions in abstract.items() for pos in positions], key=lambda x: x[1]))
            else:
                abstract_text = ''
            if abstract_text and len(abstract_text) > 50:
                authors = ', '.join(a['author']['display_name'] for a in work.get('authorships', []))
                if len(authors) > 1000:
                    authors = authors[:950] + ' ... et al.'
                articles.append({
                    'title': work['title'],
                    'authors': authors,
                    'publish_date': datetime.strptime(work['publication_date'], '%Y-%m-%d').date() if work.get('publication_date') else None,
                    'link': work.get('doi', work.get('primary_location', {}).get('source', {}).get('display_name', '')),
                    'full_text': abstract_text
                })
        logger.info(f"OpenAlex fetched {len(articles)} articles for query '{query}'")
        return articles
    except requests.exceptions.HTTPError as e:
        logger.error(f"OpenAlex error for query '{query}': {e}, Response: {e.response.text if e.response else 'No response'}")
        raise
    except Exception as e:
        logger.error(f"OpenAlex error for query '{query}': {e}")
        return []

def scholarly_search(query='6G wireless communication', max_results=5):
    try:
        search_query = scholarly.search_pubs(query)
        articles = []
        for i, result in enumerate(search_query):
            if i >= max_results:
                break
            authors = ', '.join(result['bib']['author'] or [])
            if len(authors) > 1000:
                authors = authors[:950] + ' ... et al.'
            articles.append({
                'title': result['bib']['title'],
                'authors': authors,
                'publish_date': datetime.strptime(result['bib']['pub_year'], '%Y').date() if result['bib'].get('pub_year') else None,
                'link': result.get('eprinturl', result['pub_url']),
                'full_text': result.get('abstract', '')
            })
            time.sleep(1)
        logger.info(f"Google Scholar fetched {len(articles)} articles for query '{query}'")
        return articles
    except Exception as e:
        logger.error(f"Google Scholar error for query '{query}': {e}")
        return []

def weekly_search():
    all_articles = []
    selected_keywords = G6_KEYWORDS[:5]  # Limit to 5 to avoid rate limits
    for keyword in selected_keywords:
        all_articles += arxiv_search(keyword)
        all_articles += semantic_search(keyword)
        all_articles += openalex_search(keyword)
        time.sleep(1)  # Rate limiting

    all_articles += scholarly_search(selected_keywords[0])  # Google Scholar last, no retry

    seen = set()
    unique = []
    one_month_ago = datetime.now() - timedelta(days=30)
    for a in all_articles:
        if a.get('publish_date') and a['publish_date'] < one_month_ago.date():
            continue  # Skip articles older than 30 days
        key = (a['title'], a.get('link', ''))
        if key not in seen and len(unique) < 10:
            seen.add(key)
            unique.append(a)

    logger.info(f"Fetched {len(all_articles)} total articles, {len(unique)} unique after dedup (capped at 10)")
    return unique 
