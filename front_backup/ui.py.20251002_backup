from flask import Flask, render_template, request, make_response
from datetime import datetime
import json
import os
import glob
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__, template_folder='templates', static_folder='static')

@app.route('/')
def index():
    week = request.args.get('week', get_current_week())
    json_file = f"backend/articles_week_{week}.json"
    articles = []
    if os.path.exists(json_file):
        with open(json_file, 'r') as f:
            articles = json.load(f)
            logger.info(f"Raw articles for {week}: {[a['title'][:50] + ' (' + a.get('created_at', 'N/A') + ')' for a in articles]}")
            articles = sorted(articles, key=lambda x: x.get('created_at', ''), reverse=True)[:10]
            logger.info(f"Sorted articles for {week}: {[a['title'][:50] + ' (' + a.get('created_at', 'N/A') + ')' for a in articles]}")
    else:
        logger.info(f"No JSON file found for week {week}")
    logger.info(f"Loaded {len(articles)} articles for week {week}")

    # Get available weeks
    weeks = [file.split('articles_week_')[-1].replace('.json', '') for file in glob.glob('backend/articles_week_*.json')]
    weeks.sort(reverse=True)

    # Render response with no-cache headers
    response = make_response(render_template('index.html', articles=articles, selected_week=week, weeks=weeks))
    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
    return response

def get_current_week():
    year, week, _ = datetime.now().isocalendar()
    return f"{year}-{week:02d}"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000, debug=True)
